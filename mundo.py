import Constantes  # Importa el módulo Constantes que contiene variables constantes utilizadas en el juego
import pygame

obstaculos = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,
60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,
120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,
180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
240,241,242,243,244,245,246,247,248,249,280,281,298,299,
300,301,302,303,304,305,306,307,308,309,340,341,358,359,
360,361,362,363,364,365,366,367,368,369,370,371,374,375,376,377,378,379,380,381,382,383,386,387,388,389,390,391,394,395,396,397,400,401,404,405,406,407,408,409,410,411,414,415,418,419,
420,421,422,423,424,425,426,427,428,429,430,431,434,435,436,437,438,439,440,441,442,443,446,447,448,449,450,451,454,455,456,457,460,461,464,465,466,467,468,469,470,471,474,475,478,479,
480,481,482,483,484,485,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,508,509,510,511,514,515,516,517,520,521,524,525,526,527,528,529,530,531,532,533,534,535,538,539,
540,541,542,543,544,545,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,568,569,570,571,574,575,576,577,580,581,584,585,586,587,588,589,590,591,592,593,594,595,598,599,
600,601,602,603,604,605,608,609,610,611,612,613,614,615,616,617,622,623,630,631,632,633,634,635,640,641,644,645,646,647,648,649,652,653,654,655,658,659,
660,661,662,663,664,665,668,669,670,671,672,673,674,675,676,677,682,683,690,691,692,693,694,695,700,701,704,705,706,707,708,709,712,713,714,715,718,719,
720,721,724,725,728,729,742,743,744,745,746,747,750,751,752,753,754,755,760,761,764,765,766,767,768,769,772,773,774,775,778,779,
780,781,784,785,788,789,802,803,804,805,806,807,810,811,812,813,814,815,820,821,824,825,826,827,828,829,832,833,834,835,838,839,
840,841,844,845,848,849,852,853,854,855,858,859,862,863,864,865,866,867,874,875,876,877,880,881,888,889,892,893,898,899,
900,901,904,905,908,909,912,913,914,915,918,919,922,923,924,925,926,927,934,935,936,937,940,941,948,949,952,953,958,959,
960,961,964,965,968,969,972,973,974,975,978,979,986,987,990,991,994,995,996,997,1004,1005,1012,1013,1018,1019,
1020,1021,1024,1025,1028,1029,1032,1033,1034,1035,1038,1039,1046,1047,1050,1051,1054,1055,1056,1057,1064,1065,1072,1073,1078,1079,
1080,1081,1084,1085,1088,1089,1092,1093,1098,1099,1100,1101,1104,1105,1106,1107,1110,1111,1112,1113,1114,1115,1116,1117,1120,1121,1122,1123,1124,1125,1130,1131,1132,1133,1134,1135,1138,1139,
1140,1141,1144,1145,1148,1149,1152,1153,1158,1159,1160,1161,1164,1165,1166,1167,1170,1171,1172,1173,1174,1175,1176,1177,1180,1181,1182,1183,1184,1185,1190,1191,1192,1193,1194,1195,1198,1199,
1200,1201,1204,1205,1208,1209,1212,1213,1214,1215,1218,1219,1220,1221,1224,1225,1226,1227,1230,1231,1232,1233,1236,1237,1240,1241,1242,1243,1244,1245,1246,1247,1250,1251,1252,1253,1254,1255,1258,1259,
1260,1261,1264,1265,1268,1269,1272,1273,1274,1275,1278,1279,1280,1281,1284,1285,1286,1287,1290,1291,1292,1293,1296,1297,1300,1301,1302,1303,1304,1305,1306,1307,1310,1311,1312,1313,1314,1315,1318,1319,
1320,1321,1332,1333,1334,1335,1340,1341,1344,1345,1352,1353,1366,1367,1374,1375,1378,1379,
1380,1381,1392,1393,1394,1395,1400,1401,1404,1405,1412,1413,1426,1427,1434,1435,1438,1439,
1440,1441,1444,1445,1448,1449,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1490,1491,1494,1495,1498,1499,
1500,1501,1504,1505,1508,1509,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1550,1551,1554,1555,1558,1559,
1560,1561,1564,1565,1568,1569,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1584,1585,1586,1587,1588,1589,1590,1591,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1610,1611,1614,1615,1618,1619,
1620,1621,1624,1625,1628,1629,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1644,1645,1646,1647,1648,1649,1650,1651,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1670,1671,1674,1675,1678,1679,
1680,1681,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1730,1731,1734,1735,1738,1739,
1740,1741,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1790,1791,1794,1795,1798,1799,
1800,1801,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1850,1851,1854,1855,1858,1859,
1860,1861,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1910,1911,1914,1915,1918,1919,
1920,1921,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,
1980,1981,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,
2040,2041,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2072,2073,2076,2077,2080,2081,2086,2087,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,
2100,2101,2110,2111,2112,2113,2114,2115,2132,2133,2136,2137,2140,2141,2146,2147,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,
2160,2161,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2192,2193,2196,2197,2218,2219,
2220,2221,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2252,2253,2256,2257,2278,2279,
2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,
2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,
]

class Mundo():
    def __init__(self):

        self.map_tiles = []  # Inicializa una lista para almacenar los datos de los tiles del mapa
        self.obstaculos_tiles = []
        self.exit_tile = None


    def process_data(self, data, tile_list):
        self.level_length = len(data)  # Calcula la longitud del nivel basándose en el número de filas de datos
        for y, row in enumerate(data):
            for x, tile in enumerate(row):
                if tile < 2400:  # Verifica si el valor del tile está dentro de un rango válido
                    # Obtiene la imagen correspondiente al tile
                    image = tile_list[tile]
                    # Obtiene el rectángulo de la imagen y establece su posición en el mapa
                    image_rect = image.get_rect()
                    image_x = x * Constantes.TILE_SIZE
                    image_y = y * Constantes.TILE_SIZE
                    image_rect.center = (image_x, image_y)
                    # Almacena los datos del tile en una lista y los agrega a la lista de tiles del mapa
                    tile_data = [image, image_rect, image_x, image_y]
                    #agregar tiles a obstaculos
                    if tile in obstaculos:
                        self.obstaculos_tiles.append(tile_data)
                    #tile de salida
                    elif tile == 208 or 209 or 2010 or 2011 or 2012 or 2013:
                        self.exit_tile = tile_data

                    self.map_tiles.append(tile_data)
                    


    def draw(self, surface):
        # Itera sobre la lista de tiles del mapa y los dibuja en la superficie especificada
        for tile in self.map_tiles:
            surface.blit(tile[0], tile[1])  # Dibuja la imagen del tile en la posición especificada
            #pygame.draw.rect(surface, (255, 0, 0), tile[1], 1)  # Dibuja los rectángulos de colisión en rojo para depuración 
